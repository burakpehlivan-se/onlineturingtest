import type { NextApiRequest, NextApiResponse } from 'next'
import { loadQuestionsPool, addQuestionsToPool } from '../../../lib/questions-store'
import { logQuestionsGenerated, logError } from '../../../lib/logger'

const SAMPLE_QUESTIONS = [
  {
    question: 'Yapay zeka nedir ve hangi alanlarda kullanƒ±lƒ±r?',
    answerAI:
      'Yapay zeka, insan benzeri zeka g√∂sterebilen bilgisayar sistemleridir. Makine √∂ƒürenmesi, derin √∂ƒürenme ve doƒüal dil i≈üleme gibi teknolojileri kullanarak, veri analizi, g√∂r√ºnt√º tanƒ±ma ve karar verme gibi g√∂revleri otomatik olarak ger√ßekle≈ütirebilir. Saƒülƒ±k, finans, ula≈ütƒ±rma ve eƒüitim gibi bir√ßok alanda uygulanmaktadƒ±r.',
    answerHuman:
      'Yapay zeka (AI) bilgisayarlar tarafƒ±ndan ger√ßekle≈ütirilen zeka g√∂sterimidir. ƒ∞nsan zekasƒ±nƒ±n bilgisayarlar tarafƒ±ndan taklit edilmesidir. Makine √∂ƒürenmesi ve derin √∂ƒürenme gibi teknikler kullanƒ±larak, sistemler deneyimlerden √∂ƒürenebilir ve performansƒ±nƒ± iyile≈ütirebilir. Hepsi de g√ºnl√ºk hayatƒ±mƒ±zda kullanƒ±lƒ±yor, √∂rneƒüin akƒ±llƒ± telefonlar, sosyal medya algoritmalarƒ± ve otonom ara√ßlar.',
    source: 'Reddit - r/MachineLearning',
  },
  {
    question: 'Kuantum bilgisayarlar klasik bilgisayarlardan nasƒ±l farklƒ±dƒ±r?',
    answerAI:
      'Kuantum bilgisayarlar, klasik bilgisayarlardan temel olarak farklƒ±dƒ±r. Klasik bilgisayarlar 0 ve 1 (bit) kullanƒ±rken, kuantum bilgisayarlar kuantum bitleri (qubit) kullanƒ±r. Kubitler, s√ºperpozisyon ve dolanƒ±klƒ±k gibi kuantum mekaniksel √∂zellikleri sayesinde, aynƒ± anda birden fazla durumda olabilir. Bu, kuantum bilgisayarlarƒ± belirli problemleri √ß√∂zmede √ßok daha hƒ±zlƒ± hale getirir.',
    answerHuman:
      'Kuantum bilgisayarlar √ßok farklƒ± √ßalƒ±≈üƒ±yor. Klasik bilgisayarlar 0 veya 1 ile √ßalƒ±≈üƒ±rken, kuantum bilgisayarlar qubit adƒ± verilen ≈üeyler kullanƒ±yor. Qubitlerin g√ºzel tarafƒ±, hem 0 hem de 1 olabilmeleri aynƒ± anda. Buna s√ºperpozisyon deniyor. Ayrƒ±ca dolanƒ±klƒ±k diye bir ≈üey var ki, bu da kubitler arasƒ±nda garip bir baƒülantƒ± olu≈üturuyor. Bu y√ºzden kuantum bilgisayarlar bazƒ± problemleri √ßok daha hƒ±zlƒ± √ß√∂zebiliyor.',
    source: 'Stack Overflow',
  },
  {
    question: 'ƒ∞klim deƒüi≈üikliƒüinin ana nedenleri nelerdir?',
    answerAI:
      'ƒ∞klim deƒüi≈üikliƒüinin ana nedenleri, insan faaliyetleri tarafƒ±ndan atmosfere salƒ±nan sera gazlarƒ±dƒ±r. √ñzellikle karbondioksit (CO2), metan (CH4) ve azot oksit (N2O) gibi gazlar, g√ºne≈ü ƒ±≈üƒ±nlarƒ±nƒ±n geri yansƒ±masƒ±nƒ± engeller ve ƒ±sƒ± tutar. Fosil yakƒ±tlarƒ±n yakƒ±lmasƒ±, end√ºstri, tarƒ±m ve ula≈ütƒ±rma bu gazlarƒ±n ana kaynaƒüƒ±dƒ±r. Ormanlarƒ±n yok edilmesi de atmosferdeki CO2 seviyesini artƒ±rƒ±r.',
    answerHuman:
      'ƒ∞klim deƒüi≈üikliƒüi √ßok karma≈üƒ±k bir konu ama temel olarak sera gazlarƒ±ndan kaynaklanƒ±yor. Fabrikalar, arabalar, elektrik √ºretimi... hepsi karbondioksit salƒ±yor. Ayrƒ±ca hayvan √ßiftlikleri metan salƒ±yor, bu da √ßok k√∂t√º. Ormanlara da zarar veriyoruz, oysa aƒüa√ßlar CO2 absorbe ediyor. Sonu√ß olarak, bu gazlar atmosferde birikerek ƒ±sƒ± tutuyor ve d√ºnya ƒ±sƒ±nƒ±yor. Buzullar erimesi, deniz seviyesi y√ºkseliyor, hava durumu daha ekstrem oluyor.',
    source: 'Quora',
  },
]

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET' && req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const questions = loadQuestionsPool()

    const newQuestions = SAMPLE_QUESTIONS.filter(
      (q) => !questions.some((existing: any) => existing.question === q.question)
    ).map((q, idx) => ({
      id: `q_${Date.now()}_${idx}`,
      ...q,
    }))

    // OpenRouter'dan dinamik AI cevaplarƒ± getir (opsiyonel)
    if (process.env.OPENROUTER_API_KEY && newQuestions.length > 0) {
      console.log(`\nü§ñ OpenRouter'dan AI cevaplarƒ± getiriliyor...`)
      for (const question of newQuestions) {
        try {
          // Doƒürudan OpenRouter API'sine sor
          const prompt = `Orta zorluk seviyesinde, bir uzmanƒ±n blog yazƒ±sƒ± gibi cevapla. Anla≈üƒ±lƒ±r, akƒ±cƒ± ve bilgilendirici ol. Maksimum 200 kelime.\n\nSoru: ${question.question}\n\nCevap:`

          const aiResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
              'HTTP-Referer': 'http://localhost:3000',
              'X-Title': 'Online Turing Test',
            },
            body: JSON.stringify({
              model: 'gpt-3.5-turbo',
              messages: [
                {
                  role: 'system',
                  content: 'Sen bilgili ve yardƒ±mcƒ± bir asistansƒ±n. Sorulan sorulara doƒüru, bilgilendirici ve uygun uzunlukta cevaplar ver.',
                },
                {
                  role: 'user',
                  content: prompt,
                },
              ],
              temperature: 0.7,
              max_tokens: 300,
            }),
          })

          if (aiResponse.ok) {
            const aiData = await aiResponse.json()
            if (aiData.choices && aiData.choices[0]?.message?.content) {
              question.answerAI = aiData.choices[0].message.content.trim()
              console.log(`  ‚úì ${question.question.substring(0, 40)}...`)
            }
          } else {
            console.log(`  ‚ö† API Hatasƒ±: ${aiResponse.status}`)
          }
        } catch (err) {
          console.log(`  ‚ö† AI cevap getirilemedi, √∂rnek cevap kullanƒ±lƒ±yor`)
        }
      }
    }

    if (newQuestions.length > 0) {
      const updatedQuestions = addQuestionsToPool(newQuestions)
      logQuestionsGenerated(newQuestions.length, updatedQuestions.length)

      console.log(`\nüìö SORU HAVUZU G√úNCELLENDƒ∞`)
      console.log(`  Toplam Soru: ${updatedQuestions.length}`)
      console.log(`  Yeni Sorular: ${newQuestions.length}`)
      console.log(`  AI Cevaplarƒ±: ${process.env.OPENROUTER_API_KEY ? 'Aktif' : 'Pasif (√∂rnek cevaplar)'}\n`)
    } else {
      console.log(`\nüìö SORU HAVUZU ZATEN DOLU - ${questions.length} soru mevcut\n`)
    }

    const finalQuestions = newQuestions.length > 0 ? loadQuestionsPool() : questions
    res.status(200).json({
      success: true,
      addedCount: newQuestions.length,
      totalQuestions: finalQuestions.length,
    })
  } catch (error) {
    logError('Soru Olu≈üturma', error)
    res.status(500).json({ error: 'Failed to generate questions' })
  }
}
